# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hospital.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='hospital.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0ehospital.proto\"\x15\n\x07Request\x12\n\n\x02id\x18\x01 \x01(\x03\"\n\n\x08Response\";\n\x06Person\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x12\n\nfirst_name\x18\x02 \x01(\t\x12\x11\n\tlast_name\x18\x03 \x01(\t\"\"\n\x07Patient\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"&\n\x08Patients\x12\x1a\n\x08patients\x18\x01 \x03(\x0b\x32\x08.Patient\"!\n\x06\x44octor\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"#\n\x07\x44octors\x12\x18\n\x07\x64octors\x18\x01 \x03(\x0b\x32\x07.Doctor\"\x1e\n\x03Lab\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"\x1a\n\x04Labs\x12\x12\n\x04labs\x18\x01 \x03(\x0b\x32\x04.Lab\"\xd3\x01\n\x0bMedicalExam\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x19\n\x07patient\x18\x02 \x01(\x0b\x32\x08.Patient\x12\x17\n\x06\x64octor\x18\x03 \x01(\x0b\x32\x07.Doctor\x12\x11\n\x03lab\x18\x04 \x01(\x0b\x32\x04.Lab\x12\x0c\n\x04time\x18\x05 \x01(\t\x12*\n\x07results\x18\x06 \x03(\x0b\x32\x19.MedicalExam.ResultsEntry\x1a\x37\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x16\n\x05value\x18\x02 \x01(\x0b\x32\x07.Result:\x02\x38\x01\"V\n\x14\x46ilterByRangeRequest\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x11\n\tmin_value\x18\x03 \x01(\x01\x12\x11\n\tmax_value\x18\x04 \x01(\x01\"%\n\x06Result\x12\r\n\x05value\x18\x01 \x01(\x01\x12\x0c\n\x04unit\x18\x02 \x01(\t\"\xa6\x01\n\x0e\x41\x64\x64\x45xamRequest\x12\x0e\n\x06\x64octor\x18\x01 \x01(\x03\x12\x0f\n\x07patient\x18\x02 \x01(\x03\x12\x0b\n\x03lab\x18\x03 \x01(\x03\x12-\n\x07results\x18\x04 \x03(\x0b\x32\x1c.AddExamRequest.ResultsEntry\x1a\x37\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x16\n\x05value\x18\x02 \x01(\x0b\x32\x07.Result:\x02\x38\x01\"8\n\x0fRegisterRequest\x12\x12\n\nfirst_name\x18\x01 \x01(\t\x12\x11\n\tlast_name\x18\x02 \x01(\t2A\n\x0ePatientService\x12/\n\x11RequestAllResults\x12\x08.Request\x1a\x0c.MedicalExam\"\x00\x30\x01\x32\xed\x01\n\rDoctorService\x12+\n\x12RequestAllPatients\x12\x08.Request\x1a\t.Patients\"\x00\x12\x31\n\x18RequestPatientsForDoctor\x12\x08.Request\x1a\t.Patients\"\x00\x12:\n\x1cRequestMedicalExamsForDoctor\x12\x08.Request\x1a\x0c.MedicalExam\"\x00\x30\x01\x12@\n\x15RequestResultsInRange\x12\x15.FilterByRangeRequest\x1a\x0c.MedicalExam\"\x00\x30\x01\x32o\n\nLabService\x12*\n\nAddResults\x12\x0f.AddExamRequest\x1a\t.Response\"\x00\x12\x35\n\x17RequestAllResultsForLab\x12\x08.Request\x1a\x0c.MedicalExam\"\x00\x30\x01\x32\xb0\x01\n\rPublicService\x12#\n\x0bListDoctors\x12\x08.Request\x1a\x08.Doctors\"\x00\x12\x1d\n\x08ListLabs\x12\x08.Request\x1a\x05.Labs\"\x00\x12/\n\x0fRegisterPatient\x12\x10.RegisterRequest\x1a\x08.Patient\"\x00\x12*\n\x13RequestPersonalData\x12\x08.Request\x1a\x07.Person\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Request.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=39,
)


_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=41,
  serialized_end=51,
)


_PERSON = _descriptor.Descriptor(
  name='Person',
  full_name='Person',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Person.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='first_name', full_name='Person.first_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_name', full_name='Person.last_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=53,
  serialized_end=112,
)


_PATIENT = _descriptor.Descriptor(
  name='Patient',
  full_name='Patient',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Patient.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=148,
)


_PATIENTS = _descriptor.Descriptor(
  name='Patients',
  full_name='Patients',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='patients', full_name='Patients.patients', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=150,
  serialized_end=188,
)


_DOCTOR = _descriptor.Descriptor(
  name='Doctor',
  full_name='Doctor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Doctor.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=190,
  serialized_end=223,
)


_DOCTORS = _descriptor.Descriptor(
  name='Doctors',
  full_name='Doctors',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctors', full_name='Doctors.doctors', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=225,
  serialized_end=260,
)


_LAB = _descriptor.Descriptor(
  name='Lab',
  full_name='Lab',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Lab.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=262,
  serialized_end=292,
)


_LABS = _descriptor.Descriptor(
  name='Labs',
  full_name='Labs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='labs', full_name='Labs.labs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=294,
  serialized_end=320,
)


_MEDICALEXAM_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='MedicalExam.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='MedicalExam.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='MedicalExam.ResultsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=479,
  serialized_end=534,
)

_MEDICALEXAM = _descriptor.Descriptor(
  name='MedicalExam',
  full_name='MedicalExam',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='MedicalExam.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='MedicalExam.patient', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='doctor', full_name='MedicalExam.doctor', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lab', full_name='MedicalExam.lab', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time', full_name='MedicalExam.time', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='MedicalExam.results', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MEDICALEXAM_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=323,
  serialized_end=534,
)


_FILTERBYRANGEREQUEST = _descriptor.Descriptor(
  name='FilterByRangeRequest',
  full_name='FilterByRangeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='FilterByRangeRequest.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='FilterByRangeRequest.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_value', full_name='FilterByRangeRequest.min_value', index=2,
      number=3, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_value', full_name='FilterByRangeRequest.max_value', index=3,
      number=4, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=536,
  serialized_end=622,
)


_RESULT = _descriptor.Descriptor(
  name='Result',
  full_name='Result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Result.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unit', full_name='Result.unit', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=624,
  serialized_end=661,
)


_ADDEXAMREQUEST_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='AddExamRequest.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='AddExamRequest.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='AddExamRequest.ResultsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=479,
  serialized_end=534,
)

_ADDEXAMREQUEST = _descriptor.Descriptor(
  name='AddExamRequest',
  full_name='AddExamRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctor', full_name='AddExamRequest.doctor', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='AddExamRequest.patient', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lab', full_name='AddExamRequest.lab', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='AddExamRequest.results', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ADDEXAMREQUEST_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=664,
  serialized_end=830,
)


_REGISTERREQUEST = _descriptor.Descriptor(
  name='RegisterRequest',
  full_name='RegisterRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='first_name', full_name='RegisterRequest.first_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_name', full_name='RegisterRequest.last_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=832,
  serialized_end=888,
)

_PATIENT.fields_by_name['person'].message_type = _PERSON
_PATIENTS.fields_by_name['patients'].message_type = _PATIENT
_DOCTOR.fields_by_name['person'].message_type = _PERSON
_DOCTORS.fields_by_name['doctors'].message_type = _DOCTOR
_LAB.fields_by_name['person'].message_type = _PERSON
_LABS.fields_by_name['labs'].message_type = _LAB
_MEDICALEXAM_RESULTSENTRY.fields_by_name['value'].message_type = _RESULT
_MEDICALEXAM_RESULTSENTRY.containing_type = _MEDICALEXAM
_MEDICALEXAM.fields_by_name['patient'].message_type = _PATIENT
_MEDICALEXAM.fields_by_name['doctor'].message_type = _DOCTOR
_MEDICALEXAM.fields_by_name['lab'].message_type = _LAB
_MEDICALEXAM.fields_by_name['results'].message_type = _MEDICALEXAM_RESULTSENTRY
_ADDEXAMREQUEST_RESULTSENTRY.fields_by_name['value'].message_type = _RESULT
_ADDEXAMREQUEST_RESULTSENTRY.containing_type = _ADDEXAMREQUEST
_ADDEXAMREQUEST.fields_by_name['results'].message_type = _ADDEXAMREQUEST_RESULTSENTRY
DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['Response'] = _RESPONSE
DESCRIPTOR.message_types_by_name['Person'] = _PERSON
DESCRIPTOR.message_types_by_name['Patient'] = _PATIENT
DESCRIPTOR.message_types_by_name['Patients'] = _PATIENTS
DESCRIPTOR.message_types_by_name['Doctor'] = _DOCTOR
DESCRIPTOR.message_types_by_name['Doctors'] = _DOCTORS
DESCRIPTOR.message_types_by_name['Lab'] = _LAB
DESCRIPTOR.message_types_by_name['Labs'] = _LABS
DESCRIPTOR.message_types_by_name['MedicalExam'] = _MEDICALEXAM
DESCRIPTOR.message_types_by_name['FilterByRangeRequest'] = _FILTERBYRANGEREQUEST
DESCRIPTOR.message_types_by_name['Result'] = _RESULT
DESCRIPTOR.message_types_by_name['AddExamRequest'] = _ADDEXAMREQUEST
DESCRIPTOR.message_types_by_name['RegisterRequest'] = _REGISTERREQUEST

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), dict(
  DESCRIPTOR = _REQUEST,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Request)
  ))
_sym_db.RegisterMessage(Request)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSE,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Response)
  ))
_sym_db.RegisterMessage(Response)

Person = _reflection.GeneratedProtocolMessageType('Person', (_message.Message,), dict(
  DESCRIPTOR = _PERSON,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Person)
  ))
_sym_db.RegisterMessage(Person)

Patient = _reflection.GeneratedProtocolMessageType('Patient', (_message.Message,), dict(
  DESCRIPTOR = _PATIENT,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Patient)
  ))
_sym_db.RegisterMessage(Patient)

Patients = _reflection.GeneratedProtocolMessageType('Patients', (_message.Message,), dict(
  DESCRIPTOR = _PATIENTS,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Patients)
  ))
_sym_db.RegisterMessage(Patients)

Doctor = _reflection.GeneratedProtocolMessageType('Doctor', (_message.Message,), dict(
  DESCRIPTOR = _DOCTOR,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Doctor)
  ))
_sym_db.RegisterMessage(Doctor)

Doctors = _reflection.GeneratedProtocolMessageType('Doctors', (_message.Message,), dict(
  DESCRIPTOR = _DOCTORS,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Doctors)
  ))
_sym_db.RegisterMessage(Doctors)

Lab = _reflection.GeneratedProtocolMessageType('Lab', (_message.Message,), dict(
  DESCRIPTOR = _LAB,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Lab)
  ))
_sym_db.RegisterMessage(Lab)

Labs = _reflection.GeneratedProtocolMessageType('Labs', (_message.Message,), dict(
  DESCRIPTOR = _LABS,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Labs)
  ))
_sym_db.RegisterMessage(Labs)

MedicalExam = _reflection.GeneratedProtocolMessageType('MedicalExam', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _MEDICALEXAM_RESULTSENTRY,
    __module__ = 'hospital_pb2'
    # @@protoc_insertion_point(class_scope:MedicalExam.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _MEDICALEXAM,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:MedicalExam)
  ))
_sym_db.RegisterMessage(MedicalExam)
_sym_db.RegisterMessage(MedicalExam.ResultsEntry)

FilterByRangeRequest = _reflection.GeneratedProtocolMessageType('FilterByRangeRequest', (_message.Message,), dict(
  DESCRIPTOR = _FILTERBYRANGEREQUEST,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:FilterByRangeRequest)
  ))
_sym_db.RegisterMessage(FilterByRangeRequest)

Result = _reflection.GeneratedProtocolMessageType('Result', (_message.Message,), dict(
  DESCRIPTOR = _RESULT,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:Result)
  ))
_sym_db.RegisterMessage(Result)

AddExamRequest = _reflection.GeneratedProtocolMessageType('AddExamRequest', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _ADDEXAMREQUEST_RESULTSENTRY,
    __module__ = 'hospital_pb2'
    # @@protoc_insertion_point(class_scope:AddExamRequest.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _ADDEXAMREQUEST,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:AddExamRequest)
  ))
_sym_db.RegisterMessage(AddExamRequest)
_sym_db.RegisterMessage(AddExamRequest.ResultsEntry)

RegisterRequest = _reflection.GeneratedProtocolMessageType('RegisterRequest', (_message.Message,), dict(
  DESCRIPTOR = _REGISTERREQUEST,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:RegisterRequest)
  ))
_sym_db.RegisterMessage(RegisterRequest)


_MEDICALEXAM_RESULTSENTRY.has_options = True
_MEDICALEXAM_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_ADDEXAMREQUEST_RESULTSENTRY.has_options = True
_ADDEXAMREQUEST_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PatientServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.RequestAllResults = channel.unary_stream(
          '/PatientService/RequestAllResults',
          request_serializer=Request.SerializeToString,
          response_deserializer=MedicalExam.FromString,
          )


  class PatientServiceServicer(object):

    def RequestAllResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PatientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RequestAllResults': grpc.unary_stream_rpc_method_handler(
            servicer.RequestAllResults,
            request_deserializer=Request.FromString,
            response_serializer=MedicalExam.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PatientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DoctorServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.RequestAllPatients = channel.unary_unary(
          '/DoctorService/RequestAllPatients',
          request_serializer=Request.SerializeToString,
          response_deserializer=Patients.FromString,
          )
      self.RequestPatientsForDoctor = channel.unary_unary(
          '/DoctorService/RequestPatientsForDoctor',
          request_serializer=Request.SerializeToString,
          response_deserializer=Patients.FromString,
          )
      self.RequestMedicalExamsForDoctor = channel.unary_stream(
          '/DoctorService/RequestMedicalExamsForDoctor',
          request_serializer=Request.SerializeToString,
          response_deserializer=MedicalExam.FromString,
          )
      self.RequestResultsInRange = channel.unary_stream(
          '/DoctorService/RequestResultsInRange',
          request_serializer=FilterByRangeRequest.SerializeToString,
          response_deserializer=MedicalExam.FromString,
          )


  class DoctorServiceServicer(object):

    def RequestAllPatients(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RequestPatientsForDoctor(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RequestMedicalExamsForDoctor(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RequestResultsInRange(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DoctorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RequestAllPatients': grpc.unary_unary_rpc_method_handler(
            servicer.RequestAllPatients,
            request_deserializer=Request.FromString,
            response_serializer=Patients.SerializeToString,
        ),
        'RequestPatientsForDoctor': grpc.unary_unary_rpc_method_handler(
            servicer.RequestPatientsForDoctor,
            request_deserializer=Request.FromString,
            response_serializer=Patients.SerializeToString,
        ),
        'RequestMedicalExamsForDoctor': grpc.unary_stream_rpc_method_handler(
            servicer.RequestMedicalExamsForDoctor,
            request_deserializer=Request.FromString,
            response_serializer=MedicalExam.SerializeToString,
        ),
        'RequestResultsInRange': grpc.unary_stream_rpc_method_handler(
            servicer.RequestResultsInRange,
            request_deserializer=FilterByRangeRequest.FromString,
            response_serializer=MedicalExam.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DoctorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class LabServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddResults = channel.unary_unary(
          '/LabService/AddResults',
          request_serializer=AddExamRequest.SerializeToString,
          response_deserializer=Response.FromString,
          )
      self.RequestAllResultsForLab = channel.unary_stream(
          '/LabService/RequestAllResultsForLab',
          request_serializer=Request.SerializeToString,
          response_deserializer=MedicalExam.FromString,
          )


  class LabServiceServicer(object):

    def AddResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RequestAllResultsForLab(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_LabServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddResults': grpc.unary_unary_rpc_method_handler(
            servicer.AddResults,
            request_deserializer=AddExamRequest.FromString,
            response_serializer=Response.SerializeToString,
        ),
        'RequestAllResultsForLab': grpc.unary_stream_rpc_method_handler(
            servicer.RequestAllResultsForLab,
            request_deserializer=Request.FromString,
            response_serializer=MedicalExam.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'LabService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class PublicServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ListDoctors = channel.unary_unary(
          '/PublicService/ListDoctors',
          request_serializer=Request.SerializeToString,
          response_deserializer=Doctors.FromString,
          )
      self.ListLabs = channel.unary_unary(
          '/PublicService/ListLabs',
          request_serializer=Request.SerializeToString,
          response_deserializer=Labs.FromString,
          )
      self.RegisterPatient = channel.unary_unary(
          '/PublicService/RegisterPatient',
          request_serializer=RegisterRequest.SerializeToString,
          response_deserializer=Patient.FromString,
          )
      self.RequestPersonalData = channel.unary_unary(
          '/PublicService/RequestPersonalData',
          request_serializer=Request.SerializeToString,
          response_deserializer=Person.FromString,
          )


  class PublicServiceServicer(object):

    def ListDoctors(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListLabs(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegisterPatient(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RequestPersonalData(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PublicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListDoctors': grpc.unary_unary_rpc_method_handler(
            servicer.ListDoctors,
            request_deserializer=Request.FromString,
            response_serializer=Doctors.SerializeToString,
        ),
        'ListLabs': grpc.unary_unary_rpc_method_handler(
            servicer.ListLabs,
            request_deserializer=Request.FromString,
            response_serializer=Labs.SerializeToString,
        ),
        'RegisterPatient': grpc.unary_unary_rpc_method_handler(
            servicer.RegisterPatient,
            request_deserializer=RegisterRequest.FromString,
            response_serializer=Patient.SerializeToString,
        ),
        'RequestPersonalData': grpc.unary_unary_rpc_method_handler(
            servicer.RequestPersonalData,
            request_deserializer=Request.FromString,
            response_serializer=Person.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PublicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPatientServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def RequestAllResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPatientServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def RequestAllResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_PatientService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PatientService', 'RequestAllResults'): Request.FromString,
    }
    response_serializers = {
      ('PatientService', 'RequestAllResults'): MedicalExam.SerializeToString,
    }
    method_implementations = {
      ('PatientService', 'RequestAllResults'): face_utilities.unary_stream_inline(servicer.RequestAllResults),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PatientService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PatientService', 'RequestAllResults'): Request.SerializeToString,
    }
    response_deserializers = {
      ('PatientService', 'RequestAllResults'): MedicalExam.FromString,
    }
    cardinalities = {
      'RequestAllResults': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PatientService', cardinalities, options=stub_options)


  class BetaDoctorServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def RequestAllPatients(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RequestPatientsForDoctor(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RequestMedicalExamsForDoctor(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RequestResultsInRange(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDoctorServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def RequestAllPatients(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RequestAllPatients.future = None
    def RequestPatientsForDoctor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RequestPatientsForDoctor.future = None
    def RequestMedicalExamsForDoctor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def RequestResultsInRange(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_DoctorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('DoctorService', 'RequestAllPatients'): Request.FromString,
      ('DoctorService', 'RequestMedicalExamsForDoctor'): Request.FromString,
      ('DoctorService', 'RequestPatientsForDoctor'): Request.FromString,
      ('DoctorService', 'RequestResultsInRange'): FilterByRangeRequest.FromString,
    }
    response_serializers = {
      ('DoctorService', 'RequestAllPatients'): Patients.SerializeToString,
      ('DoctorService', 'RequestMedicalExamsForDoctor'): MedicalExam.SerializeToString,
      ('DoctorService', 'RequestPatientsForDoctor'): Patients.SerializeToString,
      ('DoctorService', 'RequestResultsInRange'): MedicalExam.SerializeToString,
    }
    method_implementations = {
      ('DoctorService', 'RequestAllPatients'): face_utilities.unary_unary_inline(servicer.RequestAllPatients),
      ('DoctorService', 'RequestMedicalExamsForDoctor'): face_utilities.unary_stream_inline(servicer.RequestMedicalExamsForDoctor),
      ('DoctorService', 'RequestPatientsForDoctor'): face_utilities.unary_unary_inline(servicer.RequestPatientsForDoctor),
      ('DoctorService', 'RequestResultsInRange'): face_utilities.unary_stream_inline(servicer.RequestResultsInRange),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DoctorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('DoctorService', 'RequestAllPatients'): Request.SerializeToString,
      ('DoctorService', 'RequestMedicalExamsForDoctor'): Request.SerializeToString,
      ('DoctorService', 'RequestPatientsForDoctor'): Request.SerializeToString,
      ('DoctorService', 'RequestResultsInRange'): FilterByRangeRequest.SerializeToString,
    }
    response_deserializers = {
      ('DoctorService', 'RequestAllPatients'): Patients.FromString,
      ('DoctorService', 'RequestMedicalExamsForDoctor'): MedicalExam.FromString,
      ('DoctorService', 'RequestPatientsForDoctor'): Patients.FromString,
      ('DoctorService', 'RequestResultsInRange'): MedicalExam.FromString,
    }
    cardinalities = {
      'RequestAllPatients': cardinality.Cardinality.UNARY_UNARY,
      'RequestMedicalExamsForDoctor': cardinality.Cardinality.UNARY_STREAM,
      'RequestPatientsForDoctor': cardinality.Cardinality.UNARY_UNARY,
      'RequestResultsInRange': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'DoctorService', cardinalities, options=stub_options)


  class BetaLabServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RequestAllResultsForLab(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaLabServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddResults.future = None
    def RequestAllResultsForLab(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_LabService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('LabService', 'AddResults'): AddExamRequest.FromString,
      ('LabService', 'RequestAllResultsForLab'): Request.FromString,
    }
    response_serializers = {
      ('LabService', 'AddResults'): Response.SerializeToString,
      ('LabService', 'RequestAllResultsForLab'): MedicalExam.SerializeToString,
    }
    method_implementations = {
      ('LabService', 'AddResults'): face_utilities.unary_unary_inline(servicer.AddResults),
      ('LabService', 'RequestAllResultsForLab'): face_utilities.unary_stream_inline(servicer.RequestAllResultsForLab),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_LabService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('LabService', 'AddResults'): AddExamRequest.SerializeToString,
      ('LabService', 'RequestAllResultsForLab'): Request.SerializeToString,
    }
    response_deserializers = {
      ('LabService', 'AddResults'): Response.FromString,
      ('LabService', 'RequestAllResultsForLab'): MedicalExam.FromString,
    }
    cardinalities = {
      'AddResults': cardinality.Cardinality.UNARY_UNARY,
      'RequestAllResultsForLab': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'LabService', cardinalities, options=stub_options)


  class BetaPublicServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ListDoctors(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListLabs(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegisterPatient(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RequestPersonalData(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPublicServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ListDoctors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ListDoctors.future = None
    def ListLabs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ListLabs.future = None
    def RegisterPatient(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RegisterPatient.future = None
    def RequestPersonalData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RequestPersonalData.future = None


  def beta_create_PublicService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PublicService', 'ListDoctors'): Request.FromString,
      ('PublicService', 'ListLabs'): Request.FromString,
      ('PublicService', 'RegisterPatient'): RegisterRequest.FromString,
      ('PublicService', 'RequestPersonalData'): Request.FromString,
    }
    response_serializers = {
      ('PublicService', 'ListDoctors'): Doctors.SerializeToString,
      ('PublicService', 'ListLabs'): Labs.SerializeToString,
      ('PublicService', 'RegisterPatient'): Patient.SerializeToString,
      ('PublicService', 'RequestPersonalData'): Person.SerializeToString,
    }
    method_implementations = {
      ('PublicService', 'ListDoctors'): face_utilities.unary_unary_inline(servicer.ListDoctors),
      ('PublicService', 'ListLabs'): face_utilities.unary_unary_inline(servicer.ListLabs),
      ('PublicService', 'RegisterPatient'): face_utilities.unary_unary_inline(servicer.RegisterPatient),
      ('PublicService', 'RequestPersonalData'): face_utilities.unary_unary_inline(servicer.RequestPersonalData),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PublicService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PublicService', 'ListDoctors'): Request.SerializeToString,
      ('PublicService', 'ListLabs'): Request.SerializeToString,
      ('PublicService', 'RegisterPatient'): RegisterRequest.SerializeToString,
      ('PublicService', 'RequestPersonalData'): Request.SerializeToString,
    }
    response_deserializers = {
      ('PublicService', 'ListDoctors'): Doctors.FromString,
      ('PublicService', 'ListLabs'): Labs.FromString,
      ('PublicService', 'RegisterPatient'): Patient.FromString,
      ('PublicService', 'RequestPersonalData'): Person.FromString,
    }
    cardinalities = {
      'ListDoctors': cardinality.Cardinality.UNARY_UNARY,
      'ListLabs': cardinality.Cardinality.UNARY_UNARY,
      'RegisterPatient': cardinality.Cardinality.UNARY_UNARY,
      'RequestPersonalData': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PublicService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
